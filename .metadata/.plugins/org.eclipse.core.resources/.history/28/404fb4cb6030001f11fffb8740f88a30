package com.ota.springboot.coding.exam.controller;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ota.springboot.coding.exam.entity.NoteErrorResponse;
import com.ota.springboot.coding.exam.entity.NotesEntity;
import com.ota.springboot.coding.exam.excep.NotesErrorException;
import com.ota.springboot.coding.exam.services.NotesService;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/api")
public class NoteTakingController {


	@Autowired
	NotesService notesService;

	@GetMapping("/notes")
	public  ResponseEntity<?> fetchNotesList(){
		return new ResponseEntity<ArrayList<NotesEntity>>(this.notesService.findAllNotes(), HttpStatus.OK);	
	}

	@GetMapping("/notes/{id}")
	public  ResponseEntity<?> fetchNotesById(@PathVariable int id){
		return new ResponseEntity<NotesEntity>(this.notesService.findbyId(id), HttpStatus.OK);	
	}

	@PostMapping("/notes")
	public ResponseEntity<?> saveNotes(@RequestBody NotesEntity entity) throws Exception {

		entity.setId(0); // to identify as new record
		this.notesService.saveNotes(entity);
		return new ResponseEntity<NotesEntity>(HttpStatus.OK);	
	}

	@PutMapping("/notes")
	public ResponseEntity<?> updateNotes(@RequestBody NotesEntity entity) throws Exception {

		if(entity.getId() == 0)
			this.notesService.saveNotes(entity);
		return new ResponseEntity<NotesEntity>(HttpStatus.OK);	
	}

	@DeleteMapping("/notes/{id}")
	public  ResponseEntity<?> deleteNotesById(@PathVariable int id){
		this.notesService.deleteNotesbyId(id);
		return new ResponseEntity<NotesEntity>(HttpStatus.OK);	
	}


	@ExceptionHandler
	public ResponseEntity<NoteErrorResponse> handleException(NotesErrorException exc) {

		NoteErrorResponse error = new NoteErrorResponse();

		error.setStatus(HttpStatus.NOT_FOUND.value());
		error.setMessage(exc.getMessage());
		error.setTimeStamp(System.currentTimeMillis());

		return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
	}



	@ExceptionHandler
	public ResponseEntity<NoteErrorResponse> handleException(Exception exc) {

		NoteErrorResponse error = new NoteErrorResponse();

		error.setStatus(HttpStatus.BAD_REQUEST.value());
		error.setMessage(exc.getMessage());
		error.setTimeStamp(System.currentTimeMillis());

		return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
	}


}
